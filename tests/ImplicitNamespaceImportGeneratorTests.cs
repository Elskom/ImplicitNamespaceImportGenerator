global using System;
global using System.Collections.Immutable;
global using System.Linq;
global using System.Threading;
global using ImplicitNamespaceImportGenerator;
global using Microsoft.CodeAnalysis;
global using Microsoft.CodeAnalysis.CSharp;
global using Microsoft.CodeAnalysis.Text;
global using Xunit;

namespace ImplicitNamespaceImportGenerator.Tests;

public class ImplicitNamespaceImportGeneratorTests
{
    [Fact]
    public void TestStaticImports()
    {
        var result = TestGenerate("static System.Console");
        Assert.Equal($"// <autogenerated>{Environment.NewLine}global using static global::System.Console;{Environment.NewLine}", result);
    }

    [Fact]
    public void TestAliasImports()
    {
        var result = TestGenerate("SomeAlias = System.Console");
        Assert.Equal($"// <autogenerated>{Environment.NewLine}global using SomeAlias = global::System.Console;{Environment.NewLine}", result);
    }

    [Fact]
    public void TestNormalImports()
    {
        var result = TestGenerate("System");
        Assert.Equal($"// <autogenerated>{Environment.NewLine}global using global::System;{Environment.NewLine}", result);
    }

    [Fact]
    public void TestInvalidImports()
    {
        Assert.Throws<InvalidOperationException>(() => TestGenerate("static SomeAlias = System.Console"));
    }

    [Fact]
    public void TestNoImports()
    {
        Assert.Equal(string.Empty, TestGenerate(string.Empty));
    }

    [Fact]
    public void TestNoImportsAdditionalFile()
    {
        Assert.Equal(string.Empty, TestGenerateNoAdditionalFiles());
    }

    private static string TestGenerate(string importsText)
    {
        var compilation = CSharpCompilation.Create(
            "TestAssembly",
            Array.Empty<SyntaxTree>(),
            Array.Empty<MetadataReference>(),
            new CSharpCompilationOptions(
                OutputKind.DynamicallyLinkedLibrary));
        var driver = CSharpGeneratorDriver.Create(new ImplicitNamespaceImportGenerator())
            .AddAdditionalTexts(
                ImmutableArray.Create<AdditionalText>(
                    new CustomAdditionalText("Imports.txt", importsText)));
        _ = driver.RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var generateDiagnostics);
        Assert.False(generateDiagnostics.Any(d => d.Severity == DiagnosticSeverity.Error), $"Failed: {generateDiagnostics.FirstOrDefault()?.GetMessage()}");
        return outputCompilation.SyntaxTrees.Last().ToString();
    }

    private static string TestGenerateNoAdditionalFiles()
    {
        var compilation = CSharpCompilation.Create(
            "TestAssembly",
            Array.Empty<SyntaxTree>(),
            Array.Empty<MetadataReference>(),
            new CSharpCompilationOptions(
                OutputKind.DynamicallyLinkedLibrary));
        var driver = CSharpGeneratorDriver.Create(new ImplicitNamespaceImportGenerator());
        _ = driver.RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var generateDiagnostics);
        Assert.False(generateDiagnostics.Any(d => d.Severity == DiagnosticSeverity.Error), $"Failed: {generateDiagnostics.FirstOrDefault()?.GetMessage()}");
        return !outputCompilation.SyntaxTrees.Any() ? string.Empty : outputCompilation.SyntaxTrees.Last().ToString();
    }
}
